<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on timonwong</title><link>https://theo.im/posts/</link><description>Recent content in Posts on timonwong</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2021 timonwong</copyright><atom:link href="https://theo.im/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Minio 为阿里云 OSS 提供 AWS S3 兼容 API</title><link>https://theo.im/blog/2017/10/17/use-minio-with-aliyun-oss/</link><pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2017/10/17/use-minio-with-aliyun-oss/</guid><description>&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>不可否认，现在互联网的一个大「单点」就是对象存储 &lt;a href="https://aws.amazon.com/s3">Amazon S3&lt;/a> 了，大量的应用使用了 S3 的 API，这带来了一个问题，就是应用难于迁移。虽然改客户端这层这个方法，但毕竟侵入性太大，对于一个拥有众多服务的系统来说，实现的成本比较高。&lt;/p>
&lt;p>还有另外一种方案，就是提供一个 Gateway，提供与 S3 兼容的 API 供原来的客户端使用；中转请求后打入其它类型的对象存储中（本文为阿里云 &lt;a href="https://www.aliyun.com/product/oss">OSS&lt;/a>）。&lt;/p></description></item><item><title>将钉钉接入 Prometheus AlertManager WebHook</title><link>https://theo.im/blog/2017/10/16/release-prometheus-alertmanager-webhook-for-dingtalk/</link><pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2017/10/16/release-prometheus-alertmanager-webhook-for-dingtalk/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>&lt;strong>Disclaimer&lt;/strong>: Personally I dislike &lt;a href="https://www.dingtalk.com">DingTalk&lt;/a>(a.k.a DingDing) at all 😜.&lt;/p>
&lt;p>Project Repo: &lt;a href="https://github.com/timonwong/prometheus-webhook-dingtalk">https://github.com/timonwong/prometheus-webhook-dingtalk&lt;/a>&lt;/p></description></item><item><title>解决 AWS ELB 偶发的 502 Bad Gateway 错误</title><link>https://theo.im/blog/2017/10/14/suspicious-502-error-from-elb/</link><pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2017/10/14/suspicious-502-error-from-elb/</guid><description>问题描述 在使用了 Prometheus blackbox_exporter 做了 HTTP 协议的监控之后，blackbox_exporter 偶尔会报一些 ProbeDown 的报警，经过检查是 502 Bad Gateway 错误，但此时后端是正常的，只是在 AWS ELB</description></item><item><title>在 Python 中统计文本字符个数</title><link>https://theo.im/blog/2014/08/13/count-text-element-count-in-python/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/08/13/count-text-element-count-in-python/</guid><description>&lt;p>字符集向来都是一个大问题，即使是 Python 3.x，也最多只是能说感谢 &lt;a href="http://en.wikipedia.org/wiki/Unicode">Unicode&lt;/a> 字符集，字符串的存取现在没有问题了。&lt;/p>
&lt;p>Unicode 字符集的常见&lt;strong>编码&lt;/strong>有 &lt;a href="http://en.wikipedia.org/wiki/UTF-8">UTF-8&lt;/a>、&lt;a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16&lt;/a>、&lt;a href="http://en.wikipedia.org/wiki/UTF-32">UTF-32&lt;/a> 等常见格式，另外，&lt;a href="http://en.wikipedia.org/wiki/GB_18030">GB18030&lt;/a> 也可以算其中一种（ GB18030，与 UTF-8 类似，是一种变长编码格式，最大的优势就是兼容 &lt;a href="http://en.wikipedia.org/wiki/GBK">GBK&lt;/a>/&lt;a href="http://en.wikipedia.org/wiki/GB2312">GB2312&lt;/a> ）&lt;/p>
&lt;p>但是 Unicode 就能无痛的解决所有问题吗？答案是否定的。&lt;/p></description></item><item><title>Golang 内存模型（一）</title><link>https://theo.im/blog/2014/08/08/Golang-memory-part-1/</link><pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/08/08/Golang-memory-part-1/</guid><description>开始之前 首先，这是一篇菜B写的文章，可能会有理解错误的地方，发现错误请斧正，谢谢。 为了治疗我的懒癌早期，我一次就不写得太多了，这个系列想写很久了，每次</description></item><item><title>在 Go 中获取 stacktrace</title><link>https://theo.im/blog/2014/07/21/Printing-stacktrace-in-Go/</link><pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/07/21/Printing-stacktrace-in-Go/</guid><description>buf := make([]byte, 1&amp;lt;&amp;lt;16) // 获取 **所有** goroutine 的 stacktrace runtime.Stack(buf, true) // 如果需要获取 **当前** goroutine 的 stacktrace, 第二个参数需要为 `false` runtime.Stack(buf, true) fmt.Println(string(buf)) 太诡异了，居然要指定 buffer 的大小，用起来不方便。虽然可以给个“</description></item><item><title>使用 FPM 创建 Python 的 RPM 包</title><link>https://theo.im/blog/2014/05/16/use-fpm-to-create-python-rpm-packages/</link><pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/05/16/use-fpm-to-create-python-rpm-packages/</guid><description>生成 RPM 包太麻烦了，最近知道了一个名为 FPM 的神器，在此记录一下。 安装 FPM NOTE: 测试系统为 RedHat 系的 CentOS 6.3，编译 Python 2.7.6 的 RPM 包。 安装 Ruby 由于 FPM 使用 Ruby 写成，因此系统中需要安</description></item><item><title>RabbitMQ笔记（三）: Pika客户端（Python）发送大尺寸消息的问题</title><link>https://theo.im/blog/2014/05/15/rabbitmq-note-3-pika-send-large-message/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/05/15/rabbitmq-note-3-pika-send-large-message/</guid><description>问题描述 这个问题存在很久了，现象就是使用 Pika 库的客户端在发送大尺寸消息后，RabbitMQ 没有收到，Consumer 那里会认为消息已丢失。 NOTE: 即使在本文写</description></item><item><title>解决GitHub Pages的302转向问题</title><link>https://theo.im/blog/2014/05/14/resolve-302-redirection-on-github-pages/</link><pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/05/14/resolve-302-redirection-on-github-pages/</guid><description>起因 NOTE: 如果给GitHub Pages使用的是子域名，按照GitHub Pages文档配置，不会出现该问题。 由于我在GitHub Pages上的搭的博客使用了</description></item><item><title>RabbitMQ笔记（一）: 通过Vagrant建立一个RabbitMQ服务器实验环境</title><link>https://theo.im/blog/2014/05/13/rabbitmq-note-1-setup-experimental-rabbitmq-environment-using-vagrant/</link><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/05/13/rabbitmq-note-1-setup-experimental-rabbitmq-environment-using-vagrant/</guid><description>安装Vagrant 在官方网站上，下载并安装Vagrant NOTE: Vagrant 1.6版本对CentOS的guest支持不好，不能正确设置网络连接，需要升级到最新版或打上</description></item><item><title>RabbitMQ笔记（二）: 并发连接数</title><link>https://theo.im/blog/2014/05/13/rabbitmq-note-2-about-simultaneous-connections/</link><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2014/05/13/rabbitmq-note-2-about-simultaneous-connections/</guid><description>概要 对于服务器来说，并发连接数一直是一个需要考量的问题，因此在这里做一个简单的测试。 测试 在测试前，需要准备一个客户端环境，本文的环境是: CentOS 6.3 Python 2.7.6 Kombu NOTE: 下</description></item><item><title>Directory comparison for git difftool, with Beyond Compare 3</title><link>https://theo.im/blog/2012/10/27/directory-comparison-for-git-difftool/</link><pubDate>Sat, 27 Oct 2012 00:00:00 +0000</pubDate><guid>https://theo.im/blog/2012/10/27/directory-comparison-for-git-difftool/</guid><description>For a long time, I didn&amp;rsquo;t know a way to do directory comparison using git difftool command, extdiff extension from Mercurial did perform much more superior than Git.
Though it may be a bit out of date, I just found that after v1.7.11, Git now supports directory comparison through --dir-diff option, fantastic!
UPDATE 12/11/2012: You will need v1.8.0 version of msysgit installed, as noted by Scooter Software (Reference).
So here is a list of steps for me to make Beyond Compare 3 and Git directory comparison work under Windows.</description></item></channel></rss>